using System;
 
// Step 1: Common interface for Real and Proxy objects


public interface IImage


{


    void Display();


}
 
// Step 2: Real object that simulates an expensive operation


public class RealImage : IImage


{


    private string _fileName;
 
    public RealImage(string fileName)


    {


        _fileName = fileName;


        LoadImageFromDisk();


    }
 
    private void LoadImageFromDisk()


    {


        Console.WriteLine("Loading image: " + _fileName);


    }
 
    public void Display()


    {


        Console.WriteLine("Displaying image: " + _fileName);


    }


}
 
// Step 3: Proxy class that controls access to RealImage


public class ProxyImage : IImage


{


    private RealImage _realImage;


    private string _fileName;
 
    public ProxyImage(string fileName)


    {


        _fileName = fileName;


    }
 
    public void Display()


    {


        // Lazy-loading: Only loads when Display() is called


        if (_realImage == null)


        {


            _realImage = new RealImage(_fileName);


        }


        _realImage.Display();


    }


}
 
// Step 4: Main Program to use Proxy


class Program


{


    static void Main()


    {


        IImage image1 = new ProxyImage("test_image1.jpg");


        IImage image2 = new ProxyImage("test_image2.jpg");
 
        // First call will load and display


        image1.Display();


        Console.WriteLine();


        // Second call only displays, avoiding reloading


        image1.Display();


        Console.WriteLine();
 
        // Another image instance


        image2.Display();


    }


}

 
using System;
 
// Step 1: Command Interface


public interface ICommand


{


    void Execute();


    void Undo();


}
 
// Step 2: Receiver Class


public class Light


{


    public void TurnOn()


    {


        Console.WriteLine("The light is ON");


    }
 
    public void TurnOff()


    {


        Console.WriteLine("The light is OFF");


    }


}
 
// Step 3: Concrete Commands


public class TurnOnCommand : ICommand


{


    private Light _light;
 
    public TurnOnCommand(Light light)


    {


        _light = light;


    }
 
    public void Execute()


    {


        _light.TurnOn();


    }
 
    public void Undo()


    {


        _light.TurnOff();


    }


}
 
public class TurnOffCommand : ICommand


{


    private Light _light;
 
    public TurnOffCommand(Light light)


    {


        _light = light;


    }
 
    public void Execute()


    {


        _light.TurnOff();


    }
 
    public void Undo()


    {


        _light.TurnOn();


    }


}
 
// Step 4: Invoker Class


public class RemoteControl


{


    private ICommand _command;
 
    public void SetCommand(ICommand command)


    {


        _command = command;


    }
 
    public void PressButton()


    {


        _command.Execute();


    }
 
    public void PressUndo()


    {


        _command.Undo();


    }


}
 
// Step 5: Main Program


class Program


{


    static void Main()


    {


        Light light = new Light();


        ICommand turnOn = new TurnOnCommand(light);


        ICommand turnOff = new TurnOffCommand(light);
 
        RemoteControl remote = new RemoteControl();
 
        // Turning light ON


        remote.SetCommand(turnOn);


        remote.PressButton();


        remote.PressUndo();
 
        Console.WriteLine();
 
        // Turning light OFF


        remote.SetCommand(turnOff);


        remote.PressButton();


        remote.PressUndo();


    }


}

 }
